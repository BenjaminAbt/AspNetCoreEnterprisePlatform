// <auto-generated />
using System;
using BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.SqlServer.Migrations.Migrations
{
    [DbContext(typeof(TenantsDatabaseSqlServerContext))]
    partial class TenantsDatabaseSqlServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.TenantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.TenantUserAccountAssociationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId");

                    b.HasIndex("TenantId", "UserAccountId")
                        .IsUnique();

                    b.ToTable("TenantUserAccountAssociations", (string)null);
                });

            modelBuilder.Entity("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.UserAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts", (string)null);
                });

            modelBuilder.Entity("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.TenantUserAccountAssociationEntity", b =>
                {
                    b.HasOne("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.TenantEntity", "Tenant")
                        .WithMany("TenantUserAccountAssociations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.UserAccountEntity", "UserAccount")
                        .WithMany("TenantUserAccountAssociations")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.TenantEntity", b =>
                {
                    b.Navigation("TenantUserAccountAssociations");
                });

            modelBuilder.Entity("BenjaminAbt.MyDemoPlatform.Features.Tenants.Database.Entities.UserAccountEntity", b =>
                {
                    b.Navigation("TenantUserAccountAssociations");
                });
#pragma warning restore 612, 618
        }
    }
}
